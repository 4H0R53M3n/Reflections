What happens when you initialize a repository? Why do you need to do it?

	-When you initialize a reposity you create a head file for git to reference. This will be used to track changes and commits made to the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	-The staging area contains the list of files that will be committed next. It allows the user to seperate the commits of files into logical steps instead of one massive commit every time.


How can you use the staging area to make sure you have one commit per logical
change?

	-by adding the files to the staging area and using the diff command to check the changes between the working directory, staging area, and the last commit the user can easily choose to only submit one logical change per commit.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	-branches are useful when developing experimental code or when you're developing a new piece of software but want to keep a stable version around on the master branch


How do the diagrams help you visualize the branch structure?

	-Using a diagram allows you to see when a branch diverted from the master and what has been changed in each after a branch has been created


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	-Since the branches are merging into one every commit from both of those branches are now viewable from the single master branch. The result is adding the code from both branches after resolving merge conflicts.


What are the pros and cons of Gits automatic merging vs. always doing merges
manually?
